import numpy as np
import time
from common import get_args, experiment_setup, load_vaes, make_env, load_field_parameters, load_dist_estimator
from vae_env_inter import take_env_image, take_image_objects, latents_from_images
import copy
from j_vae.latent_space_transformations import interval_map_function
import matplotlib.pyplot as plt
from play import Player
from algorithm.replay_buffer import goal_based_process
from utils.image_util import create_rollout_video
from collections import namedtuple
from PIL import Image
import seaborn as sns

# the distances to the edges seen in the image are 0.025
doing_f_r = False
if doing_f_r:
    map_coords_x = interval_map_function(0., 64., 1.025, 1.575)
    map_coords_y = interval_map_function(0., 64., 0.475, 1.025)
    map_size = interval_map_function(0., 64., 0., 1.025 - 0.475)
else:
    map_coords_x = interval_map_function(-1., 1., 1.025, 1.575)
    map_coords_y = interval_map_function(-1., 1., 0.475, 1.025)
    map_size = interval_map_function(0., 2., 0., 1.025 - 0.475)


def map_coords(coords):
    if doing_f_r:
        # here the y coordinates are flipped since images use other direction
        m_xs = map_coords_x(coords[:, 0:1])
        ny = 64. - coords[:, 1:2]
        m_ys = map_coords_y(ny)

    else:
        m_xs = map_coords_x(coords[:, 0:1])
        m_ys = map_coords_y(-1. * coords[:, 1:2])
    return np.concatenate([m_xs, m_ys], axis=1)


def map_sizes(sizes):
    m_xs = map_size(sizes[:, 0:1])
    m_ys = map_size(sizes[:, 1:2])
    return np.concatenate([m_xs, m_ys], axis=1)


def create_heatmap(args, env, player):
    nx = 100
    ny = 100

    pos_x = np.linspace(1.05, 1.55, num=nx, endpoint=True)
    pos_y = np.linspace(0.5, 1.0, num=ny, endpoint=True)

    for timestep in range(10):
        obs_orginal = []
        obs = []
        env.reset()
        data = np.zeros(shape=(nx, ny))

        #pass some steps so that moving obstacles are in other part
        do_steps = timestep
        while do_steps > 0:
            do_steps -= 1
            action = [0., 0., 0., 0.]
            env.step(action)

        env_image = take_env_image(env, args.img_size)
        im_current = Image.fromarray(env_image.astype(np.uint8))
        im_current.save('log/heatmaps/env_at_timestep_{}.png'.format(timestep))

        for i, px in enumerate(pos_x):
            for j, py in enumerate(pos_y):
                env.env.env._move_object(position=[px, py, 0.425])#todo use high of env
                '''for timestep in range(3):
                    action = [0., 0., 0., 0.]
                    o, _, _, info = env.step(action)
                    obs.append(o)
                    env_images.append(take_env_image(env, args.img_size))'''
                o = env.get_obs()
                obs_orginal.append(o)
                obs.append(goal_based_process(o))
                q_val = player.get_q_pi([goal_based_process(o)])[0]
                data[i, j] = q_val

        ax = plt.gca()
        im = ax.imshow(data, cmap='cool', interpolation='nearest')
        # Create colorbar
        cbar_kw = {}
        cbarlabel = ""
        cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)
        cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")
        plt.title('heatmap')
        plt.savefig('log/heatmaps/map_at_timestep_{}.png'.format(timestep))
        plt.clf()



if __name__ == '__main__':

    # Getting arguments from command line + defaults
    # Set up learning environment including, gym env, ddpg agent, hgg/normal learner, tester
    args = get_args()
    # creates copy of args for the real coordinates
    args_real = copy.copy(args)
    # this class compares space generated by neuralt network (in this case Bbox) with real coordinates)
    #todo
    #if args.
    #load_vaes(args)
    env = make_env(args)
    load_field_parameters(args)
    #load_dist_estimator(args, env)#todo needed?

    print("player best")
    args.play_path = 'log/072-ddpg-FetchPushMovingObstacleEnv-v1-hgg-optimal-stop/'
    args.play_epoch = 'best'
    player = Player(args)


    LoggerMock = namedtuple('Logger', ['my_log_dir'])#todo needed?
    args.logger = LoggerMock(my_log_dir='log/space_tests/')

    # compare rollouts
    # compare_rollouts(args=args, args_real=args_real, env=env)
    create_heatmap(args=args, env=env, player=player)